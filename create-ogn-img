#!/bin/bash

# task requires super user privileges

## TODO : check super user !
if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

# check md5sum of original image before proceding
md5sum --check foundational-image.md5sum 
if [ $? -ne 0 ]; then 
  echo "You don't have the correct starting image"
  exit
fi

# ------------ expand the size of partition two --------

# make a copy of the original image. we will modify the copy.
cp img/2022-04-29-rpi-lite-ognro-v0.3-stretch.img img/ognstation.img

# extend the file size of the original image
fallocate -l 2.0G img/ognstation.img 

# associate the image file with a loop device
myloop=`losetup --show --find img/ognstation.img`

# probe the device for its partitions
partprobe ${myloop}

# optional. just to display info.
lsblk $myloop

# resize (grow) the second partition with parted
parted ${myloop} resizepart 2 100%FREE

# cleanup the file system on the second partition. avoids a problem with the next step.
e2fsck -f ${myloop}p2

# resize the file system in the second partition.
resize2fs ${myloop}p2

# ------------ update image with our content -------------

# make mount directories if necessary
mkdir -p /mnt/p1
mkdir -p /mnt/p2
mkdir -p /mnt/p3

# mount the partitions
mount ${myloop}p1 /mnt/p1
mount ${myloop}p2 /mnt/p2

# copy p1 files
rsync -av --no-owner --no-group p1/ /mnt/p1/

# set ownership of things changed and added

cp p2/home/pi/installWittyPi4 /mnt/p2/home/pi/installWittyPi4
chown 1000.1000 /mnt/p2/home/pi/installWittyPi4
chmod 0744      /mnt/p2/home/pi/installWittyPi4

# adjusted crontab for root
cp p2/var/spool/cron/crontabs/root /mnt/p2/var/spool/cron/crontabs/root 
chown 0.107 /mnt/p2/var/spool/cron/crontabs/root 
chmod 0600  /mnt/p2/var/spool/cron/crontabs/root 

# rsync for ogn logs
cp p2/root/rsync-ognlogs /mnt/p2/root/rsync-ognlogs
chown 0.0  /mnt/p2/root/rsync-ognlogs
chmod 0755 /mnt/p2/root/rsync-ognlogs

# custom autossh
cp p2/root/glidernet-autossh /mnt/p2/root/glidernet-autossh
chown 0.0  /mnt/p2/root/glidernet-autossh
chmod 0755 /mnt/p2/root/glidernet-autossh

# custom fstab
cp p2/etc/fstab /mnt/p2/etc/fstab
chown 0.0  /mnt/p2/etc/fstab
chmod 0644 /mnt/p2/etc/fstab

# set the timezone
cp -P p2/etc/localtime /mnt/p2/etc/localtime

# service for logging OGN
cp p2/root/rfl_stop.sh /mnt/p2/root/rfl_stop.sh
chown 0.0  /mnt/p2/root/rfl_stop.sh
chmod 0755 /mnt/p2/root/rfl_stop.sh

cp p2/root/rfl_start.sh /mnt/p2/root/rfl_start.sh
chown 0.0  /mnt/p2/root/rfl_start.sh
chmod 0755 /mnt/p2/root/rfl_start.sh

cp p2/root/rfl.service /mnt/p2/root/rfl.service
chown 0.0  /mnt/p2/root/rfl.service
chmod 0644 /mnt/p2/root/rfl.service

# install these to avoid downloading from Internet.
cp p2/home/pi/rtlsdr-ogn-bin-ARM-latest.tgz /mnt/p2/home/pi/rtlsdr-ogn-bin-ARM-latest.tgz
chown 1000.1000 /mnt/p2/home/pi/rtlsdr-ogn-bin-ARM-latest.tgz
chmod 0644 /mnt/p2/home/pi/rtlsdr-ogn-bin-ARM-latest.tgz

cp p2/home/pi/rtlsdr-ogn-bin-RPI-GPU-latest.tgz /mnt/p2/home/pi/rtlsdr-ogn-bin-RPI-GPU-latest.tgz
chown 1000.1000 /mnt/p2/home/pi/rtlsdr-ogn-bin-RPI-GPU-latest.tgz
chmod 0644 /mnt/p2/home/pi/rtlsdr-ogn-bin-RPI-GPU-latest.tgz

# create and enable OGN logging service
cp -P p2/etc/systemd/system/rfl.service /mnt/p2/etc/systemd/system/rfl.service
cp -P p2/etc/systemd/system/multi-user.target.wants/rfl.service /mnt/p2/etc/systemd/system/multi-user.target.wants/rfl.service

# reduce Internet access by disabling these services
rm /mnt/p2/etc/systemd/system/multi-user.target.wants/rpi-eeprom-update.service
rm /mnt/p2/etc/systemd/system/timers.target.wants/apt-daily-upgrade.timer
rm /mnt/p2/etc/systemd/system/timers.target.wants/apt-daily.timer

# the following step ensures efficient compression of our new image
# by filling empty space with zeros.

# add a file of zeros to the filesystem until full, then remove it
dd if=/dev/zero of=/mnt/p2/delme; rm /mnt/p2/delme

# unmount the partitions from the mount points
umount /mnt/p1/
umount /mnt/p2/

# detach the loop device.
losetup --detach ${myloop}


# ============ add third partition ==============

# extend the image, creating additional free space for this partition
fallocate -l 3.5G img/ognstation.img 

# associate the image file with a loop device
myloop=`losetup --show --find img/ognstation.img`

# probe the device for its partitions
partprobe ${myloop}

# optional. just to display info.
lsblk $myloop

# create third partition
parted ${myloop} mkpart primary ext4 2147MB 3746MB

# put ext4 filesystem on third partition
mkfs.ext4 ${myloop}p3

# mount
mount ${myloop}p3 /mnt/p3

# create the directory where OGN logs will be written
mkdir -p /mnt/p3/ogn/log

# the following step ensures efficient compression of our new image
# by filling empty space with zeros.

# add a file of zeros to the filesystem until full, then remove it
dd if=/dev/zero of=/mnt/p3/delme; rm /mnt/p3/delme

umount /mnt/p3

# detach the loop device.
losetup --detach ${myloop}

exit 0
